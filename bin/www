#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('altor:server');
var http = require('http');
var BinaryServer = require('binaryjs').BinaryServer;
var fs = require('fs');
var wav = require('wav');
var outFile = 'demo.wav';

/// ================ Google speech recognition ======================== ////
const Speech = require('@google-cloud/speech');
// Your Google Cloud Platform project ID
const projectId = 'readem-163808';
// Instantiates a client
const speechClient = Speech({
    projectId: projectId
});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
binaryServer = BinaryServer({port: 9001});
function recognizeSpeech(outFile) {
    const options = {
        encoding: 'LINEAR16',
        sampleRate: 48000,
        languageCode: "he-IL"
    };
    const fileName = './' + outFile;

    // Detects speech in the audio file
    speechClient.recognize(fileName, options)
        .then((results) => {
            const transcription = results[0];
            const confidence = results[1].results[0].alternatives[0].confidence;
            console.log(`Transcription: ${transcription}`);
            console.log(`Confidence: ${confidence}`);
        });
}

binaryServer.on('connection', function(client) {
    console.log('new connection');

    var fileWriter = new wav.FileWriter(outFile, {
        channels: 1,
        sampleRate: 48000,
        bitDepth: 16
    });

    client.on('stream', function(stream, meta) {
        console.log('new stream');
        stream.pipe(fileWriter);

        stream.on('end', function() {
            fileWriter.end();
            console.log('wrote to file ' + outFile);
            recognizeSpeech(outFile);
        });
    });
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
